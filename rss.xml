<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Naveen M K's website RSS Feed]]></title><description><![CDATA[Naveen M K: I'm a student currently interested in web development and other cool stuff. I usually write about various projects I'm working on and stuff that's interesting. I also contribute to various open source projects.]]></description><link>https://www.naveenmk.me</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 08 Oct 2023 16:52:43 GMT</lastBuildDate><item><title><![CDATA[Tips and Tricks for Using Weasyprint to Generate PDFs]]></title><description><![CDATA[Weasyprint, if you’ve not known before is a wonderful tool to generate PDFs from HTML and CSS. It’s a Python library and it’s very easy to…]]></description><link>https://www.naveenmk.me/blog/weasyprint</link><guid isPermaLink="false">https://www.naveenmk.me/blog/weasyprint</guid><pubDate>Sat, 26 Aug 2023 18:30:00 GMT</pubDate><content:encoded>
Weasyprint, if you’ve not known before is a wonderful tool to generate PDFs from HTML and CSS. It’s a Python library and it’s very easy to use.

In this post, I&apos;m writing about the things I learned when I was using Weasyprint on a project. Hope that this will help someone!

## Setting page size

Using the `@page` property of CSS one can set the page size. The default page size is A4. But if you want to change it, you can do it like this:

```css
@page {
    size: A3 landscape;
}
```

See the [MDN docs for @page rules&apos;s size property](https://developer.mozilla.org/en-US/docs/Web/CSS/@page/size) for more information about the values that can be used.

## Setting page margins

Similar to setting page size, you can set the page margins using the `@page` property.

```css
@page {
    margin: 1cm;
}
```

## Page breaks

You can set page breaks using the `page-break-before` and `page-break-after` properties. I usually define a class called `.page-break` and use it like this:

```html
&lt;style&gt;
    .page-break {
        page-break-after: always;
    }
&lt;/style&gt;
&lt;div class=&quot;page-break&quot;&gt;&lt;/div&gt;
```

You can use the `page-break-before` and `page-break-after` properties directly on the element you want to break the page before or after.

If you&apos;ve some content that you want to keep together, you can use the `page-break-inside` property.

```css
.page-break-inside {
    page-break-inside: avoid;
}
```

See the [MDN docs for page-break-inside](https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-inside) for more information.

## Displaying page numbers

I was generating a report and I wanted to display the page numbers on the bottom of the page. I used the `content` property of CSS to do this.

```css
@page {
    @bottom-center {
        content: counter(page);
    }
}
```

The `counter` function is used to display the page number. The `page` is a counter that is incremented for each page. You can also use the `counter` function to display the total number of pages.

```css
@page {
    @bottom-center {
        content: counter(page) &quot; of &quot; counter(pages);
    }
}
```

See the [MDN docs for counter function](https://developer.mozilla.org/en-US/docs/Web/CSS/counter) for more information.

## Displaying headers and footers

While you can use the `@page` property to display headers/footer which contains text displaying something like a logo (an SVG Image) was tricky. I was asked to display the logo of my university at the top of each page. Here&apos;s some code that I used to do this.

```html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        header {
            position: running(header);
            /* height of the header */
            height: 4cm;
        }

        @page {
            size: A4;
            /* Add margin for the header */
            margin-top: 4cm;

            @top-center {
                content: element(header);
            }
        }

        .page-break {
            page-break-after: always;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;header&gt;
        &lt;!-- set the height to match the header height --&gt;
        &lt;img src=&quot;header.svg&quot; style=&quot;height: 4cm&quot; /&gt;
    &lt;/header&gt;
    &lt;h1&gt;Page 1&lt;/h1&gt;
    &lt;div class=&quot;page-break&quot;&gt;&lt;/div&gt;
    &lt;h1&gt;Page 2&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
```
You could add anything you would like to display in the header inside the `header` element. Similarly, you can change the `@top-center` to `@bottom-center` to display the footer.

## Displaying long tables

If you&apos;ve a long table that spans multiple pages, you can use the `table-header` and `table-footer` properties to display the table header and footer on each page.

```css
thead {
    display: table-header-group;
}
tfoot {
    display: table-footer-group;
}
```

## Disabling word wrapping

If you&apos;ve a long word that you don&apos;t want to wrap, you can use the `white-space` property to do this.

```css
.long-word {
    white-space: nowrap;
}
```

For me, I had a table with a column that contained a long word. I used the `white-space` property to disable word wrapping for that column, YMMV.

## That&apos;s all

That&apos;s all for now. I&apos;ll update this post if I learn something new. If you&apos;ve any questions, feel free to ask me on [twitter](https://twitter.com/naveen521kk) or open a new [discussion](https://github.com/naveen521kk/naveen521kk.github.io/discussions).
</content:encoded></item><item><title><![CDATA[Interesting XOR property — Finding unique number in an array]]></title><description><![CDATA[Recently, while learning about the XOR operation, I came across an interesting property of XOR operation. The property is as follows: XOR…]]></description><link>https://www.naveenmk.me/blog/xor-unique-number-array</link><guid isPermaLink="false">https://www.naveenmk.me/blog/xor-unique-number-array</guid><pubDate>Sat, 18 Feb 2023 05:25:01 GMT</pubDate><content:encoded>
import { XOROpsDisplay, XORTruthTable } from &quot;./xor-ops.tsx&quot;;

Recently, while learning about the XOR operation, I came across an interesting property of XOR operation. The property is as follows:

&gt; XOR of a number with itself cancels out the number

For example, if we take the number `5` and XOR it with itself, we get `0` as the result. That is `5 ^ 5 = 0`.


&lt;XOROpsDisplay defaultFirstNumber={5} defaultSecondNumber={5}/&gt;

If you are confused how the above operation works, you can check out the truth table below:

&lt;XORTruthTable /&gt;

### Problem Statement

If you have been given a array `arr = [1, 2, 3, 11, 1, 2, 3]` then find the unique number. Note then all the numbers are repeated twice and a unique is only available once in the given array. Note that the array is not sorted and the numbers are not in any particular order.

### Solution

If we XOR each element in the array with each other then the duplicates would be canceled out giving us the remaining unique number. See the below code in Python.


```py
&gt;&gt;&gt; arr = [1, 2, 3, 11, 1, 2, 3]
&gt;&gt;&gt; unique = 0
&gt;&gt;&gt; for num in arr:
...     unique ^= num
...
&gt;&gt;&gt; unique
11
```

This is the efficient solution to the problem. The time complexity of the solution is `O(n)` and the space complexity is `O(1)`.

### Code

I&apos;ve written the code in multiple languages. You can check out the code below:

##### C/C++
```c
#include &lt;stdio.h&gt;

int main() {
    int arr[] = {1, 2, 3, 11, 1, 2, 3};
    int unique = 0;
    for (int i = 0; i &lt; 7; i++) {
        unique ^= arr[i];
    }
    printf(&quot;%d\n&quot;, unique);
    return 0;
}
```

##### Java
```java
public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 11, 1, 2, 3};
        int unique = 0;
        for (int i = 0; i &lt; arr.length; i++) {
            unique ^= arr[i];
        }
        System.out.println(unique);
    }
}
```


##### Python
```py
arr = [1, 2, 3, 11, 1, 2, 3]
unique = 0
for num in arr:
    unique ^= num
print(unique)
```

##### JavaScript
```js
const arr = [1, 2, 3, 11, 1, 2, 3];
let unique = 0;
for (let i = 0; i &lt; arr.length; i++) {
    unique ^= arr[i];
}
console.log(unique);
```
</content:encoded></item><item><title><![CDATA[Setting page size when printing HTML]]></title><description><![CDATA[Recently, in a project I was working on, I was given the task to setup a page which the user will print with only frontend-tools (html…]]></description><link>https://www.naveenmk.me/blog/setting-page-size-when-printing-html</link><guid isPermaLink="false">https://www.naveenmk.me/blog/setting-page-size-when-printing-html</guid><pubDate>Tue, 27 Dec 2022 05:25:01 GMT</pubDate><content:encoded>
Recently, in a project I was working on, I was given the task to setup a page which the user
will print with only frontend-tools (html, javascript and css). The project was all setup on
frontend side and doesn&apos;t have a server, that&apos;s why all this had to be done on the frontend.

### About `@page` css rule

Now, what I found was that there exists a [`@page` css rule](https://developer.mozilla.org/en-US/docs/Web/CSS/@page) which can be used to set the page size
when printing a page. The rule is as follows:

```css
@page {
    size: A4;
}
```

The above rule will set the page size to that of a A4 sheet when printing the page. See https://developer.mozilla.org/en-US/docs/Web/CSS/@page/size
for the possible values.

### Setting page orientation

It&apos;s also possible to set the page to landscape when printing by using the `landscape` keyword.

```css
@page {
    size: A4 landscape;
}
```

That will set the page size to A4 and the orientation to landscape, something which you would need when printing a large table.

### Using a media query - `print`

Another thing is that you can use the `@page` rule to set the page size for a specific media query. For example, if you want to set the page size to A4 for the print media query, you can do the following:

```css
@media print {
    @page {
        size: A4;
    }
}
```

That media query is really useful when you just want to set the page size when printing and not when the page is rendered on the screen.

### Conditionally loading a stylesheet

If you want to load a different stylesheet when printing, you can use the media query to load the stylesheet.

```html
&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; media=&quot;screen&quot; /&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;print.css&quot; media=&quot;print&quot; /&gt;
```

### Setting page margins

If you want page margins to be set, you can use the `margin` property of the `@page` rule.

```css
@page {
    size: A4;
    margin: 1cm;
}
```

### Setting page header and footer

You can use the `@page` rule to set the page header and footer.

```css
@page {
    size: A4;
    margin: 1cm;
    @bottom-left {
        content: &quot;This is the footer&quot;;
    }
}
```

### More information

More detailed explanation about various way to print a page can be found at https://developer.mozilla.org/en-US/docs/Web/Guide/Printing.

This is a very simple article, but I think it will be helpful for someone who wants to print a page from the browser. If you have any questions, feel free to ask in the comments or create a new issue at https://github.com/naveen521kk/naveen521kk.github.io/issues.
</content:encoded></item><item><title><![CDATA[Setup a C development environment on Windows]]></title><description><![CDATA[In this post, I’m sharing my experience to set up a C development environment on Windows. I’m installing GCC from the MSYS2 project and…]]></description><link>https://www.naveenmk.me/blog/setup-c-dev-environment-windows/</link><guid isPermaLink="false">https://www.naveenmk.me/blog/setup-c-dev-environment-windows/</guid><pubDate>Thu, 07 Apr 2022 05:25:01 GMT</pubDate><content:encoded>
In this post, I&apos;m sharing my experience to set up a C development environment on Windows. I&apos;m installing [GCC](https://gcc.gnu.org/) from the [MSYS2](https://msys2.org) project and using [Visual Studio Code](https://code.visualstudio.com/) as my IDE.

## Install MSYS2

MSYS2 is a project which provides a collection of tools for building native Windows software. [See this documentation for learning more about it.](https://www.msys2.org/docs/what-is-msys2/) I have installed MSYS2 as explained on [the installation page](https://www.msys2.org/#installation) using the installer in the default location.

### Installing Toolchain

After installing the base MSYS2 installation, I installed the toolchain for the MINGW64 environment. For that, I did the following steps:

1. Open &quot;MSYS2 MSYS&quot; from Start menu.

2. Run the following command:
    ```bash
    $ pacman -S --needed base-devel mingw-w64-x86_64-toolchain
    warning: file-5.39-2 is up to date -- skipping
    [... more warnings ...]
    :: There are 48 members in group base-devel:
    :: Repository msys
       1) asciidoc  2) autoconf  3) autoconf2.13  4) autogen
       [... more packages listed ...]
    
    Enter a selection (default=all):
    :: There are 19 members in group mingw-w64-x86_64-toolchain:
    :: Repository mingw64
       1) mingw-w64-x86_64-binutils  2) mingw-w64-x86_64-crt-git
       [... more packages listed ...]
    
    Enter a selection (default=all):
    resolving dependencies...
    looking for conflicting packages...
    
    Packages (123) docbook-xml-4.5-2  docbook-xsl-1.79.2-1
                   [... more packages listed ...]
                   m4-1.4.18-2  make-4.3-1  man-db-2.9.3-1
                   mingw-w64-x86_64-binutils-2.35.1-3
                   mingw-w64-x86_64-crt-git-9.0.0.6090.ad98746a-1
                   mingw-w64-x86_64-gcc-10.2.0-6
                   mingw-w64-x86_64-gcc-ada-10.2.0-6
                   mingw-w64-x86_64-gcc-fortran-10.2.0-6
                   mingw-w64-x86_64-gcc-libgfortran-10.2.0-6
                   mingw-w64-x86_64-gcc-libs-10.2.0-6
                   mingw-w64-x86_64-gcc-objc-10.2.0-6
                   mingw-w64-x86_64-gdb-10.1-2
                   mingw-w64-x86_64-gdb-multiarch-10.1-2
                  [... more packages listed ...]
    
    Total Download Size:    196.15 MiB
    Total Installed Size:  1254.96 MiB
    
    :: Proceed with installation? [Y/n]
    [... downloading and installation continues ...]
    ```

### Verifying Toolchain

1. Open &quot;MSYS MinGW 64-bit&quot; from start menu.

2. Verify that `gcc --version` works.
	```bash
	$ gcc --version
	gcc.exe (Rev10, Built by MSYS2 project) 11.2.0
   Copyright (C) 2021 Free Software Foundation, Inc.
   This is free software; see the source for copying conditions.  There is NO
   warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   ```
   ![gcc version test](./gcc-version-test.png)
   
3. Compile a test program:
	```c
	#include &lt;stdio.h&gt;
	int main(){
		printf(&quot;Hello World\n&quot;);
	}
	```
	Save the test program to `test.c` and then run `gcc test.c` in the same shell and then run the executable by `./a.exe`.
	
	```bash
	~ took 20s
	❯ gcc test.c
	
	~ took 8s
	❯ ./a.exe
	Hello World
	```
	![gcc test compilation msys2](./gcc-test-compilation.png)
	

If everything works as expected then follow next steps. If something seems broken and doesn&apos;t work, please ask in `#help` at [MSYS2&apos;s discord server](https://discord.gg/jPQdRdDcT9).

## Configuring Visual Studio Code

Open Visual Studio Code (VSCode). Typing &lt;kbd&gt;Win + R&lt;/kbd&gt; and typing entering `code` should open it. Or you can open it by searching it in the start menu.

### Install Extensions

[Install](https://code.visualstudio.com/docs/editor/extension-marketplace) the [C/C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for Visual Studio Code.

You can install the C/C++ extension by searching for &apos;c++&apos; in the Extensions view &lt;kbd&gt;Ctrl+Shift+X&lt;/kbd&gt;.

### Creating a hello world project

Create a hello world project (or open a project you already have):
```sh
mkdir projects
cd projects
mkdir helloworld
cd helloworld
code .
```
The &quot;code .&quot; command opens VS Code in the current working folder, which becomes your &quot;workspace&quot;. Accept the [Workspace Trust dialog](https://code.visualstudio.com/docs/editor/workspace-trust) by selecting &quot;Yes&quot;, I trust the authors since this is a folder you created.

![vscode workspace trust](./vscode-workspace-trust.png)

Also, create a file `helloworld.c` with the following &quot;Hello World&quot; code:

```c
#include &lt;stdio.h&gt;
int main(){
	printf(&quot;Hello World&quot;);
}
```

### Configuring Visual Studio Code to use GCC compiler

Open the Command Palette (`Ctrl+Shift+P`) and the select **C/C++: Edit Configurations (UI)**. Change the **Configuration name** to **GCC**, set the **Compiler path** dropdown to the gcc compiler (`C:/msys64/mingw64/bin/gcc.exe`), and the **IntelliSense mode** to match the compiler (**windows-gcc-x64**).

The JSON file (`.vscode/c_cpp_properties.json`) in the end should look like this:

```json
{
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;GCC&quot;,
            &quot;includePath&quot;: [
                &quot;${default}&quot;
            ],
            &quot;defines&quot;: [
                &quot;_DEBUG&quot;,
                &quot;UNICODE&quot;,
                &quot;_UNICODE&quot;
            ],
            &quot;compilerPath&quot;: &quot;C:/msys64/mingw64/bin/gcc.exe&quot;,
            &quot;cStandard&quot;: &quot;c17&quot;,
            &quot;cppStandard&quot;: &quot;c++17&quot;,
            &quot;intelliSenseMode&quot;: &quot;windows-gcc-x64&quot;
        }
    ],
    &quot;version&quot;: 4
}
```

This should enable [Intellisense](https://en.wikipedia.org/wiki/Intelligent_code_completion#IntelliSense).

### Configuring `tasks.json`

This file is used to tell VS Code how to build (compile) the program. This task will invoke the `gcc` compiler to create an executable file based on the source code.

From the main menu, choose `Terminal &gt; Configure Default Build Task`. In the dropdown, which will display a tasks dropdown listing various predefined build tasks for C compilers. Choose `gcc.exe` build active file, which will build the file that is currently displayed (active) in the editor.

![vscode default gcc task](./vscode-default-task.png)

This will create a `tasks.json` file in a `.vscode` folder and open it in the editor, modify the file as required.

You can now build your source file by using &lt;kbd&gt;Ctrl+Shift+B&lt;/kbd&gt; and run it by opening a terminal inside VSCode and runnning `.\helloworld.exe`.

### Setting up Debugger

This steps will configure Visual Studio Code to use GDB debugger when you press `F5` to debug  the program.

1. From the main menu, choose 	`Run &gt; Add Configuration...` and then choose `C++ (GDB/LLDB)`.
2. Click on &quot;Add Configuration&quot; and select &quot;C/C++: (gdb) Launch&quot;. The creates `launch.json` and opens it.
3. Edit the file to change the key `miDebuggerPath` to the actual executable of GDB (`C:\\msys64\\mingw64\\bin\\gdb.exe`). 
4. Edit the file to change the key `program` to `${fileDirname}\\${fileBasenameNoExtension}.exe`.
4. Again, edit the file to add the below code to the end, so that the file you edit is actually built before running the debugger.
```json
&quot;preLaunchTask&quot;: &quot;C/C++: gcc.exe build active file&quot;
```


The `launch.json` looks like this in the end

```json
{
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;(gdb) Launch&quot;,
            &quot;type&quot;: &quot;cppdbg&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;program&quot;: &quot;${fileDirname}\\${fileBasenameNoExtension}.exe&quot;,
            &quot;args&quot;: [],
            &quot;stopAtEntry&quot;: false,
            &quot;cwd&quot;: &quot;${fileDirname}&quot;,
            &quot;environment&quot;: [],
            &quot;externalConsole&quot;: false,
            &quot;MIMode&quot;: &quot;gdb&quot;,
            &quot;miDebuggerPath&quot;: &quot;C:\\msys64\\mingw64\\bin\\gdb.exe&quot;,
            &quot;setupCommands&quot;: [
                {
                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,
                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,
                    &quot;ignoreFailures&quot;: true
                },
                {
                    &quot;description&quot;:  &quot;Set Disassembly Flavor to Intel&quot;,
                    &quot;text&quot;: &quot;-gdb-set disassembly-flavor intel&quot;,
                    &quot;ignoreFailures&quot;: true
                }
            ],
            &quot;preLaunchTask&quot;: &quot;C/C++: gcc.exe build active file&quot;
        }
    ]
}
```

After this, you can have a look at [Visual Studio Code&apos;s docs](https://code.visualstudio.com/docs/cpp/config-mingw#_debug-helloworldcpp) on how to debug.

Hope this helps you in configuring Visual Studio Code for setting up a development environment for C. If you have an error, or found something to difficult to  understand, jump over to `#help` on [MSYS2&apos;s Discord server](https://discord.gg/jPQdRdDcT9).
</content:encoded></item><item><title><![CDATA[Configuring Visual Studio Code for using with Manim]]></title><description><![CDATA[Installing Manim Follow the instruction in the Installation Page on the official documentation. After installing Manim get back here for…]]></description><link>https://www.naveenmk.me/manim/manim-configuration-for-vscode/</link><guid isPermaLink="false">https://www.naveenmk.me/manim/manim-configuration-for-vscode/</guid><pubDate>Fri, 18 Mar 2022 05:25:01 GMT</pubDate><content:encoded>
import NoteBlock from &quot;../components/note-block.jsx&quot;;

## Installing Manim

Follow the instruction in the [Installation Page](https://docs.manim.community/en/stable/installation.html#installing-manim-locally) on the official documentation. After installing Manim get back here for configuring the virtual environment. In my case, I use Windows; I used chocolatey to install Manim (`choco install manimce`). 

### Configuring the Virtual Environment

1. Open a Terminal (say `cmd` on Windows) on the project directory. The project directory can be anywhere including a folder on your desktop. For me it&apos;s `C:\dev\manim-project`. I opened a PowerShell window by doing &lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Right Click&lt;/kbd&gt; and then clicked on `Open PowerShell window here`. (On windows 11 you would need to click `Show more options`)

   ![powershell screen C:\dev\manim-project](/assets/manim-vscode/powershell_start_screen.png)

2. Create a new virtual environment
   ```shell
   python -m venv .venv
   ```

3. Activate the Virtual Environment. 

   1. On Windows: `.venv\Scripts\activate` (should work on cmd, also)
   2. On macOS/Linux/WSL: `source .venv/bin/activate` (this will include Git Bash users on Windows also).
   ![powershell screen create venv](/assets/manim-vscode/powershell_install_and_activate_venv.png)

&lt;NoteBlock&gt;
    On powershell, you may see an error like below when activating the virtual environment.
    &lt;img src=&quot;/assets/manim-vscode/powershell_set_execution_error.png&quot; /&gt;
    In which case, you can run the command 
    &lt;pre className=&quot;language-text&quot;&gt;
        &lt;code className=&quot;language-text&quot;&gt;Set-ExecutionPolicy Bypass -Scope CurrentUser&lt;/code&gt;
    &lt;/pre&gt;
    Also doing so could introduce security issues, have a look at the &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies&quot;&gt;docs&lt;/a&gt; before running this command.
&lt;/NoteBlock&gt;

4. Install Manim using **pip**:

   ```shell
   python -m pip install manim
   ```

   ![powershell pip install manim](/assets/manim-vscode/powershell_pip_install_manim_op.png)

If you followed the steps correctly you should see the version of manim when running `manim --version` in that terminal. Just don&apos;t close the terminal yet, that will be used in the next steps.

### Initializing a Manim project
To initialize a manim project run:
```shell
manim init project &lt;project-name&gt;
```

where `&lt;project-name&gt;` should be replaced by the directory where you need to create a project (introduced in manim `v0.16.0`). 
Manim asks for some questions and creates the project accordingly with configuration files.

![powershell manim init](/assets/manim-vscode/powershell_manim_init.png)

This should create 2 files `main.py` and `manim.cfg` inside the `&lt;project-name&gt;` folder.

![file explorer manim init output](/assets/manim-vscode/file_explorer_manim_init_op.png)

`manim.cfg` contains the configuration files necessary for Manim. They can be overridden by command line flags. [See the documentation for a tutorial on using them](https://docs.manim.community/en/stable/guides/configuration.html).

You would need to `cd` into `&lt;project-name&gt;` directory before continuing next steps.

```shell
cd &lt;project-name&gt;
```



## Configuring Visual Studio Code

1. Open VSCode. Typing `code .` in the same terminal should do the trick.

2. Click &quot;Yes&quot; in the dialog box. (This is needed so that other extensions work correctly)
    ![code manim workspace confirmation](/assets/manim-vscode/code_confirmation.png)
    
3. [Install the following extensions.](https://code.visualstudio.com/docs/editor/extension-marketplace)
    - [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
    - [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    - [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) (optional, for using manim on Jupyter)
    - [Jupyter Keymap](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-keymap) (optional, ignore if you like visual studio&apos;s keymaps)
    - [Color Highlight](https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight) (optional, if you don&apos;t want a color picker for colors)
    - [Rainbow Brackets](https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets) (optional, if you don&apos;t want all brackets to be of same color)
    - [Manim Sideview](https://marketplace.visualstudio.com/items?itemName=Rickaym.manim-sideview) (optional, if you don&apos;t want live preview of code video you generate)
    
4. Select the Python interpreter by clicking &lt;kbd&gt;F1&lt;/kbd&gt; and searching for `Python: Select Interpreter`. Select the virtual environment previously created.
    ![vscode select python interpreter manim](/assets/manim-vscode/code_choose_python.png)
    
5. If everything is configured correctly pressing &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Click&lt;/kbd&gt; should get to the corresponding definition of that class. Also, there would be no yellow swiggly lines.
    ![vscode manim show definition hover](/assets/manim-vscode/vscode_manim_defn.png)

6. If you want to use Jupyter for working with Manim, then open the same terminal and run 
    ```shell
    python -m pip install manim[jupyterlab]
    ```
7. You can open a terminal in VSCode &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;`&lt;/kbd&gt; and run manim commands there.




Hope this helps you in configuring Visual Studio Code to work with Manim. If you have an error, or found something to difficult to understand, jump over to `#help-form` on [Manim&apos;s Discord server](https://manim.community/discord).
</content:encoded></item><item><title><![CDATA[Check Palindrome (for numbers) - Algorithm, flowchart, Pseudocode, Implementation ]]></title><description><![CDATA[Given a number, write a algorithm, flowchart, pseudocode to check if it is palindrome or not. A string is said to be palindrome if reverse…]]></description><link>https://www.naveenmk.me/blog/check-palindrome-for-numbers-algorithm-flowchart/</link><guid isPermaLink="false">https://www.naveenmk.me/blog/check-palindrome-for-numbers-algorithm-flowchart/</guid><pubDate>Sat, 25 Dec 2021 11:29:01 GMT</pubDate><content:encoded>
Given a number, write a algorithm, flowchart, pseudocode to check if it is palindrome or not. 

A string is said to be palindrome if reverse of the string is same as string. For example, `1221` is palindrome, but `1223` is not palindrome.

We will follow a method where we get each numbers using mathematical operations.


## Logic

1. Get the number to check and store it in `n`.

2. Create empty variables `r = 0`, `s = 0` and`t = n`. Here, `s` will become the reversed number, `t` will be a reference to original number, `r` will be a temporary variable.

3. Start a while loop checking whether the `n != 0`(if n is 0 exit the while loop). 

4. Inside the while loop do the following operations.

   ```python
   r = n % 10
   s = s * 10 + r
   n = n / 10
   ```

   First get the last digit of `n` by dividing the given number(`n`) by 10 and finding the remainder(the `%` operator) and store it in `r`. Then, add `r` to `s` after multiplying it by previous stored value of `s` by 10. And finally divide `n` by 10 and store it again in `n`. This way the number is reversed and stored in `s`.

5. After the loop ends, check whether `s == t`(whether the original number is same as reversed number).
6. If `s == t`, display that `n` palindrome, else display `n` is not a palindrome.

## Flowchart

WIP, have a look [here](https://mermaid-js.github.io/mermaid-live-editor/view/#eyJjb2RlIjoiZ3JhcGggVERcbiAgICBBKChTdGFydCkpIC0tPiBCWy9SZWFkIE51bWJlciB0byBjaGVjayBhcyBuL107XG4gICAgQiAtLT4gQ1tBc3NpZ24gcz0wLCB0ID0gbl07XG4gICAgQyAtLT4gRHsgV2hpbGUgbiE9MCB9OyBcbiAgICBEIC0tIFRydWUgLS0-IEVbXCJyID0gbiAlIDEwIDxicj5zID0gcyAqIDEwICsgcjxicj5uID0gbiAvIDEwXCJdIC0tPiBEXG4gICAgRCAtLSBGYWxzZSAtLT4gRntJcyBuID09IHQ_fVxuICAgIEYgLS0gWWVzIC0tPiBHWy9QcmludCBuIGlzIHBhbGluZHJvbWUvXSAtLT4gSVtTdG9wXTtcbiAgICBGIC0tIE5vIC0tPiBIWy9QcmludCBuIGlzIG5vdCBhIHBhbGluZHJvbWUvXSAtLT4gSSgoU3RvcCkpOyIsIm1lcm1haWQiOiJ7XG4gIFwidGhlbWVcIjogXCJkYXJrXCJcbn0iLCJ1cGRhdGVFZGl0b3IiOnRydWUsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjp0cnVlfQ).

```js
graph TD
    A((Start)) --&gt; B[/Read Number to check as n/];
    B --&gt; C[Assign s=0, t = n];
    C --&gt; D{ While n!=0 }; 
    D -- True --&gt; E[&quot;r = n % 10 &lt;br&gt;s = s * 10 + r&lt;br&gt;n = n / 10&quot;] --&gt; D
    D -- False --&gt; F{Is n == t?}
    F -- Yes --&gt; G[/Print n is palindrome/] --&gt; I[Stop];
    F -- No --&gt; H[/Print n is not a palindrome/] --&gt; I((Stop));
```

## Pseudocode

```pseudocode
BEGIN
READ number to check as n
SET s = 0
SET t = n
WHILE n != 0 DO
	r = n % 10
	s = s * 10 + r
	n = n / 10
ENDWHILE
IF n == t
	DISPLAY n is palindrome
ELSE
	DISPLAY n is not a palindrome
ENDIF
END
```

## Implementation

1. In C:

   ```c
   #include &lt;stdio.h&gt;
   
   /* Function to check if n is Palindrome*/
   int is_palindrome(int n)
   {
       int s = 0;
       int t = n;
       int r = 0;
       while (n != 0 )
       {
           r = n % 10;
           s = s * 10 + r;
           n = n / 10;
       }
       // Check if rev_n and n are same or not.
       if (s == t)
           return 1;
       else
           return 0;
   }
   
   int main()
   {
       int tocheck = 1221;
       int op = is_palindrome(to_check);
       if (op == 1)
           printf(&quot;%d is a palindrome&quot;, tocheck);
       else
           printf(&quot;%d is not a palindrome&quot;, tocheck);
       return 0;
   }
   ```

2. In Python:

   ```python
   def is_palindrome(n: int) -&gt; bool:
       s = 0
       t = n
       r = 0
       while n != 0:
           r = n % 10
           s = s * 10 + r
           n = n / 10
       if t == s:
           return True
      	else:
           return False
   number = 1001
   palim = is_palindrom(number)
   if palim:
       print(f&quot;{number} is a palindrom&quot;)
   else:
       print(f&quot;{number} is not a palindrom&quot;)
   ```

   
</content:encoded></item><item><title><![CDATA[How I created my Logo?]]></title><description><![CDATA[I created a new logo today, it was some Python and other things I learned while developing Manim. My Original Logo

Initially, I was using a…]]></description><link>https://www.naveenmk.me/blog/how-did-i-create-my-logo/</link><guid isPermaLink="false">https://www.naveenmk.me/blog/how-did-i-create-my-logo/</guid><pubDate>Sat, 10 Jul 2021 19:26:01 GMT</pubDate><content:encoded>
I created a *new logo* today, it was some Python and other things I learned while developing Manim.

### My Original Logo

Initially, I was using a **rocket** gif (or rather a static one) as a logo for my online profiles.

&lt;video autoplay loop muted playsinline&gt;  
  &lt;source src=&quot;/assets/logo-post/videos/rocket.webm&quot; type=&quot;video/webm&quot; /&gt;  
  &lt;source src=&quot;/assets/logo-post/videos/rocket.mp4&quot; type=&quot;video/mp4&quot;/&gt;  
&lt;/video&gt;

This logo was great; I loved it (was in my profile for ~6 months), but it was time for a change I was searching for a new one or trying to create one today.


### The Story

First, I opened [Inkscape](https://inkscape.org/) and had no plans about the logo, so it&apos;s an unplanned art. I am no artist and new to Inkscape UI; I was going to each of the tools available there. Something which interested me was **Pen Tools**, which would be able to draw [Beizer Curve](https://en.wikipedia.org/wiki/B%C3%A9zier_curve). I was playing with that and then that gave me an idea 💡.

I decided that my logo is going to contain some [Quadratic Beizer Curve](https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_B%C3%A9zier_curves) with the starting point as `(0, 0)`; second control point `(0.5, 1)`; and the endpoint as `(1, 0)`. Similarly, there would be a curve around all the other sides. I tried to do that Inkscape and I didn&apos;t get any success 😢. 

Annoyed with Inkscape, I thought it would be better to create things programmatically. I wanted some tool that could give me an SVG and an API that is easy to understand. I have previously used [PyCairo (Python Bindings for Cairo Graphics Library)](https://pycairo.readthedocs.io) for [Manim](https://manim.community) and understand its API a bit; I decided to use it. 

I started to write a script that will create the SVG. So, I started with creating a [`cairo.Surface`](https://pycairo.readthedocs.io/en/latest/reference/surfaces.html) and a [`cairo.Context`](https://pycairo.readthedocs.io/en/latest/reference/context.html) from that. I decided to get a 500x500 SVG file.

```py
import cairo

width, height = 500, 500
with cairo.SVGSurface(&quot;logo.svg&quot;, width, height) as surface:
    context = cairo.Context(surface)
    context.scale(width, height)
    context.set_line_width(0.01)
```

I have scaled the `context` so I can use units within `(0,1)` rather than absolute size. Also, I have set the line width to `0.01` (a random value from *trial and error*).

Now, to draw a Bezier curve as I previously mentioned, I had to use [`Context.curve_to`](https://pycairo.readthedocs.io/en/latest/reference/context.html#cairo.Context.curve_to) method.

```py
context.curve_to(0, 0, 0.5, 1, 1, 0) # (0, 0), (0.5, 1), (1, 0)
```

Then I set the colour I wanted, for now, I just choose Black(`#000000`).
```py
context.set_source_rgba(0, 0, 0, 1)
```
and then finally use [`Context.stroke`](https://pycairo.readthedocs.io/en/latest/reference/context.html#cairo.Context.stroke) to draw the curve onto the surface.
```py
context.stroke()
```

This whole code now becomes
```py
import cairo

width, height = 500, 500
with cairo.SVGSurface(&quot;logo.svg&quot;, width, height) as surface:
    context = cairo.Context(surface)
    context.scale(width, height)
    context.set_line_width(0.01)
    context.curve_to(0, 0, 0.5, 1, 1, 0) # (0, 0), (0.5, 1), (1, 0)
    context.set_source_rgba(0, 0, 0, 1)
    context.stroke()
```
which gave me an SVG like

![beizer curve cairo](/assets/logo-post/beizer-curve.svg)


Next, it&apos;s about drawing a similar Beizer Curve from the other sides of the Image. So, I started by drawing a curve `(0, 1)`, `(0.5, 0)`, `(1, 1)`, which when translated to Python would be

```py
    context.move_to(0, 1)
    context.curve_to(0, 1, 0.5, 0, 1, 1)
    context.set_source_rgba(0, 0, 0, 1)
    context.stroke()
```

![two beizer curve cairo](/assets/logo-post/beizer-curve-1.svg)

And then another two curve `(0, 0)`, `(1, 0.5)`, `(0, 1)`.

```py
    context.move_to(0, 0)
    context.curve_to(0, 0, 1, 0.5, 0, 1)
    context.set_source_rgba(0, 0, 0, 1)
    context.stroke()
```

![three beizer curve cairo](/assets/logo-post/beizer-curve-2.svg)

and another one `(1, 0)`, `(0, 0.5)`, `(1, 1)`.

```py
    context.move_to(1, 0)
    context.curve_to(1, 0, 0, 0.5, 1, 1)
    context.set_source_rgba(0, 0, 0, 1)
    context.stroke()
```

![four beizer curve cairo](/assets/logo-post/beizer-curve-3.svg)

The logo is getting its shape. Now, I draw two lines from each corner using [`Context.line_to()`](https://pycairo.readthedocs.io/en/latest/reference/context.html#cairo.Context.line_to). But this time with a different colour RGBA `.5, .3, 6, 1` (Just a random one 😉).

```py
    context.move_to(0, 0)
    context.line_to(1, 1)
    context.set_source_rgba(.5, .3, 6)
    context.stroke()

    context.move_to(1, 0)
    context.line_to(0, 1)
    context.set_source_rgba(.5, .3, 6, 1)
    context.stroke()
```

![four beizer curve two line cairo](/assets/logo-post/beizer-curve-line.svg)

Now, the logo has come in a good shape, and I want more Beizer curves so, I decided to draw another four. These curves had the same colour as that of the line and are exactly half of the previously drawn one.

First, I draw a curve with the coordinates `(0, 0,)`, `(0.5, 0.5)`, `(0, 1)`.

```py
    context.move_to(0, 0)
    context.curve_to(0, 0, 0.5, 0.5, 0, 1)
    context.set_source_rgba(.5, .3, 6, 1)
    context.stroke()
```

![five beizer curve two line cairo](/assets/logo-post/beizer-curve-line-1.svg)

Then one with `(1, 1)`, `(0.5, 0.5)`, `(1, 0)`

```py
    context.move_to(1, 1)
    context.curve_to(1, 1, 0.5, 0.5, 1, 0)
    context.set_source_rgba(.5, .3, 6, 1)
    context.stroke()
```

![six beizer curve two line cairo](/assets/logo-post/beizer-curve-line-2.svg)

Next with `(0, 0)`, `(0.5, 0.5)`, `(1, 0)`

```py
    context.move_to(0, 0)
    context.curve_to(0, 0, 0.5, 0.5, 1, 0)
    context.set_source_rgba(.5, .3, 6, 1)
    context.stroke()
```

![seven beizer curves two line cairo](/assets/logo-post/beizer-curve-line-3.svg)

and, finally another one `(0, 1)`, `(0.5, 0.5)`, `(1, 1)` 🎉.

```py
    context.move_to(0, 1)
    context.curve_to(0, 1, 0.5, 0.5, 1, 1)
    context.set_source_rgba(.5, .3, 6, 1)
    context.stroke()
```

![eight beizer curves two line cairo](/assets/logo-post/beizer-curve-line-4.svg)

This got the base of my Logo. Now it&apos;s time to pick the colours. I wanted the first four curves to have a separate colour 🦄.

So, I went to http://colormind.io/ (a *random* website which I got from a Google Search). Selected the colour` #5FA172` as the colour for outer Beizer Curves and the Line and `#2F3954` as the colour for the inner Curves. I spend at least half an hour selecting them 🤦‍♂️.


Finally, I edited the script which I got so that I can change the colours by just changing two variables `outer_color` and `inner_color`.

And, here is the final result.

![Naveen naveen521kk logo](/assets/logo-post/final-logo.svg)

You could have seen that already I had been using it around in this site and the final script is over [here](https://github.com/naveen521kk/naveen521kk.github.io/blob/3a5e5abde14ba95c65ebd13d38f9ffe06ae57d76/logo/logo.py).

### Creating Favicon

After creating the new logo, I wanted to change the favicon of this site. I didn&apos;t want to upload it anywhere and I want to programmatically generate those Favicons. Doing a random search got me to this [article](https://nedbatchelder.com/blog/202012/favicons_with_imagemagick.html) and use [librsvg](https://wiki.gnome.org/Projects/LibRsvg/) for converting a `.svg` which I generated previously to `.png`. So, I install both [librsvg](https://packages.msys2.org/package/mingw-w64-x86_64-librsvg?repo=mingw64)  (`rsvg-convert.exe`) and [imagemagick](https://packages.msys2.org/package/mingw-w64-x86_64-imagemagick?repo=mingw64) from [MSYS2](https://msys2.org).

What I did first was to create 6 png file with various size from the SVG using `rsvg-convert` tool. Each png was of different size.
```shell
cp logo.svg temp-logo.svg
rsvg-convert temp-logo.svg  -w 16 -h 16 --output temp-16.png
rsvg-convert temp-logo.svg -w 32 -h 32 --output temp-32.png
rsvg-convert temp-logo.svg -w 48 -h 48 --output temp-48.png
rsvg-convert temp-logo.svg -w 64 -h 64 --output temp-64.png
rsvg-convert temp-logo.svg -w 96  -h 96 --output temp-96.png
rsvg-convert temp-logo.svg -w 256 -h 256 --output temp-256.png
```

And then, used ImageMagick to convert them to favicon.
```shell
convert temp-16.png temp-32.png temp-48.png temp-64.png temp-96.png temp-256.png +dither -colors 255 &quot;favicon.ico&quot;
```

Finally, I deleted the previous generated `temp-*` files.

```shell
rm temp-*.png temp-*.svg
```

You can get the whole shell script from [here](https://github.com/naveen521kk/naveen521kk.github.io/blob/main/logo/build-favicon.sh). I ran it under MSYS2 on my Windows machine.


### Creating the logo with Manim

Update 5 November 2021: someone from Discord called `ad_chaos#5354` recreated the same with Manim. See [here](https://discord.com/channels/581738731934056449/780234936980078602/906063960082636830). Thanks ❤️.

Here&apos;s the code to create it:
```py
class SyrusDarkLogo(Scene):
    def construct(self):

        # colours and constants
        green = &quot;#5FA172&quot;
        blue = &quot;#2F3954&quot;
        radii = 1.45
        x_center = 2.05

        # config
        self.camera.background_color = WHITE

        # arcs
        p1 = Arc(
            angle=2 * np.arctan(1 / (x_center - 1)), radius=radii
        ).move_arc_center_to(np.array([-x_center, 0, 0]))
        p1.rotate(-np.arctan(1 / (x_center - 1)), about_point=p1.get_arc_center())
        pn = VGroup()
        pn.add(
            *[
                p1.copy().rotate(n * PI / 2, about_point=([0, 0, 0]))
                for n in range(1, 4)
            ],
            p1
        ).set_color(green)

        # lines
        ln = VGroup()
        ln.add(Line([1, 1, 0], [-1, -1, 0]), Line([-1, 1, 0], [1, -1, 0])).set_color(
            green
        )

        # parabolas
        curve = ParametricFunction(
            lambda v: np.array([v, 0.9 * v ** 2 + 0.1, 0]), t_range=np.array([-1, 1])
        ).set_color(blue)
        curves = VGroup()
        curves.add(
            *[
                curve.copy().rotate(n * PI / 2, about_point=([0, 0, 0]))
                for n in range(4)
            ]
        )

        # final assembly
        avatar = VGroup()
        avatar.add(pn, ln, curves)
        self.add(avatar.scale(3))
```

It is also available [here](https://github.com/naveen521kk/naveen521kk.github.io/blob/main/logo/logo-manim.py).


### Aftermath

Then I opened Inkscape to get a white background on that logo. I could use Cairo but well...

Finally, uploaded my new logo to Discord, Github and Gravatar. Though this didn&apos;t fit perfectly in a circle I could edit them slightly to make things work. 

If you’ve read and followed the post this far, THANK YOU! 😃
</content:encoded></item><item><title><![CDATA[What is Img2pdf?]]></title><description><![CDATA[Img2Pdf is an CLI for converting images in a folder into a PDF file. This has a capability of adding borders around the image and finally…]]></description><link>https://www.naveenmk.me/docs/img2pdf/</link><guid isPermaLink="false">https://www.naveenmk.me/docs/img2pdf/</guid><pubDate>Wed, 16 Sep 2020 11:29:01 GMT</pubDate><content:encoded>
Img2Pdf is an *CLI* for converting images in a folder into a PDF file.
This has a capability of adding borders around the image and finally converts it to PDF files using PIL.

Made with ❤ By Naveen

# Installing Img2Pdf CLI

## Installing Using Pip

Img2pdf can be installed using [`pip` ](https://pypi.org/project/imgtopdfeasy/). For that you would need Python installed adding it to Path and also see `pip` installed. See [PyPi documentation](https://pip.pypa.io/en/stable/installing/) on how to do that.

After you have, installed it. Open you teminal/Command Prompt and type the following command.

```sh
pip install imgtopdfeasy
```


## Installing From Source

You would need [`git`](https://git-scm.com) for installing that. First,clone the repository.

```sh
git clone https://github.com/naveen521kk/img2pdf.git
cd img2pdf
```

Then you would need [poetry](https://python-poetry.org) for doing editable installs. Then install using

```sh
poetry install
```

Activate your poetry venv and the start working. ;-)

# Using Img2Pdf

Img2Pdf can be simply used by below syntax

```sh
img2pdf -i &lt;Path-to-folder&gt; -o &lt;Path-to-output-file&gt; -ext &lt;extension-of-image-to-add&gt;
```

The following options are available.

```sh
usage: img2pdf [-h] -i INPUT -o OUTPUT -ext EXTENSION [--border]
               [--border_size BORDER_SIZE] [--border_color BORDER_COLOR]

Converts Images To Pdf

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file folder full path. Realtive or abosolute
  -o OUTPUT, --output OUTPUT
                        Output file name,No pdf required
  -ext EXTENSION, --extension EXTENSION
                        File extension of image to add.
  --border              Add border to Images
  --border_size BORDER_SIZE
                        Size of border of Images
  --border_color BORDER_COLOR
                        Colour of Border of Images

Made with ❤ By Naveen
```</content:encoded></item></channel></rss>