"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[973],{9602:function(n,a,e){e.r(a),e.d(a,{default:function(){return g}});var s=e(1151),t=e(7294);function o(n){const a=Object.assign({p:"p",span:"span",h2:"h2",a:"a",ol:"ol",li:"li"},(0,s.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"Given a number, write a algorithm, flowchart, pseudocode to check if it is palindrome or not."),"\n",t.createElement(a.p,null,"A string is said to be palindrome if reverse of the string is same as string. For example, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">1221</code>'}})," is palindrome, but ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">1223</code>'}})," is not palindrome."),"\n",t.createElement(a.p,null,"We will follow a method where we get each numbers using mathematical operations."),"\n",t.createElement(a.h2,{id:"logic",style:{position:"relative"}},t.createElement(a.a,{href:"#logic","aria-label":"logic permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Logic"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"Get the number to check and store it in ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}}),"."),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"Create empty variables ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">r = 0</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">s = 0</code>'}})," and",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">t = n</code>'}}),". Here, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">s</code>'}})," will become the reversed number, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">t</code>'}})," will be a reference to original number, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">r</code>'}})," will be a temporary variable."),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"Start a while loop checking whether the ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n != 0</code>'}}),"(if n is 0 exit the while loop)."),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"Inside the while loop do the following operations."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python">r <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span>\ns <span class="token operator">=</span> s <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> r\nn <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"First get the last digit of ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}})," by dividing the given number(",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}}),") by 10 and finding the remainder(the ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">%</code>'}})," operator) and store it in ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">r</code>'}}),". Then, add ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">r</code>'}})," to ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">s</code>'}})," after multiplying it by previous stored value of ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">s</code>'}})," by 10. And finally divide ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}})," by 10 and store it again in ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}}),". This way the number is reversed and stored in ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">s</code>'}}),"."),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"After the loop ends, check whether ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">s == t</code>'}}),"(whether the original number is same as reversed number)."),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"If ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">s == t</code>'}}),", display that ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}})," palindrome, else display ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}})," is not a palindrome."),"\n"),"\n"),"\n",t.createElement(a.h2,{id:"flowchart",style:{position:"relative"}},t.createElement(a.a,{href:"#flowchart","aria-label":"flowchart permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Flowchart"),"\n",t.createElement(a.p,null,"WIP, have a look ",t.createElement(a.a,{href:"https://mermaid-js.github.io/mermaid-live-editor/view/#eyJjb2RlIjoiZ3JhcGggVERcbiAgICBBKChTdGFydCkpIC0tPiBCWy9SZWFkIE51bWJlciB0byBjaGVjayBhcyBuL107XG4gICAgQiAtLT4gQ1tBc3NpZ24gcz0wLCB0ID0gbl07XG4gICAgQyAtLT4gRHsgV2hpbGUgbiE9MCB9OyBcbiAgICBEIC0tIFRydWUgLS0-IEVbXCJyID0gbiAlIDEwIDxicj5zID0gcyAqIDEwICsgcjxicj5uID0gbiAvIDEwXCJdIC0tPiBEXG4gICAgRCAtLSBGYWxzZSAtLT4gRntJcyBuID09IHQ_fVxuICAgIEYgLS0gWWVzIC0tPiBHWy9QcmludCBuIGlzIHBhbGluZHJvbWUvXSAtLT4gSVtTdG9wXTtcbiAgICBGIC0tIE5vIC0tPiBIWy9QcmludCBuIGlzIG5vdCBhIHBhbGluZHJvbWUvXSAtLT4gSSgoU3RvcCkpOyIsIm1lcm1haWQiOiJ7XG4gIFwidGhlbWVcIjogXCJkYXJrXCJcbn0iLCJ1cGRhdGVFZGl0b3IiOnRydWUsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjp0cnVlfQ"},"here"),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js">graph <span class="token constant">TD</span>\n    <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">B</span><span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Read Number to check as n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token constant">B</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">C</span><span class="token punctuation">[</span>Assign s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token constant">C</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">D</span><span class="token punctuation">{</span> While n<span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> \n    <span class="token constant">D</span> <span class="token operator">--</span> True <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">E</span><span class="token punctuation">[</span><span class="token string">"r = n % 10 &lt;br>s = s * 10 + r&lt;br>n = n / 10"</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">D</span>\n    <span class="token constant">D</span> <span class="token operator">--</span> False <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">F</span><span class="token punctuation">{</span>Is n <span class="token operator">==</span> t<span class="token operator">?</span><span class="token punctuation">}</span>\n    <span class="token constant">F</span> <span class="token operator">--</span> Yes <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">G</span><span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Print n is palindrome</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">I</span><span class="token punctuation">[</span>Stop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token constant">F</span> <span class="token operator">--</span> No <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">H</span><span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Print n is not a palindrome</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token constant">I</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Stop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"pseudocode",style:{position:"relative"}},t.createElement(a.a,{href:"#pseudocode","aria-label":"pseudocode permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Pseudocode"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="pseudocode"><pre class="language-pseudocode"><code class="language-pseudocode">BEGIN\nREAD number to check as n\nSET s = 0\nSET t = n\nWHILE n != 0 DO\n\tr = n % 10\n\ts = s * 10 + r\n\tn = n / 10\nENDWHILE\nIF n == t\n\tDISPLAY n is palindrome\nELSE\n\tDISPLAY n is not a palindrome\nENDIF\nEND</code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"implementation",style:{position:"relative"}},t.createElement(a.a,{href:"#implementation","aria-label":"implementation permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Implementation"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"In C:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n\n<span class="token comment">/* Function to check if n is Palindrome*/</span>\n<span class="token keyword">int</span> <span class="token function">is_palindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> t <span class="token operator">=</span> n<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        r <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        s <span class="token operator">=</span> s <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> r<span class="token punctuation">;</span>\n        n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Check if rev_n and n are same or not.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> t<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> tocheck <span class="token operator">=</span> <span class="token number">1221</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">is_palindrome</span><span class="token punctuation">(</span>to_check<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is a palindrome"</span><span class="token punctuation">,</span> tocheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is not a palindrome"</span><span class="token punctuation">,</span> tocheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"In Python:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_palindrome</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>\n    s <span class="token operator">=</span> <span class="token number">0</span>\n    t <span class="token operator">=</span> n\n    r <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">while</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        r <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span>\n        s <span class="token operator">=</span> s <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> r\n        n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span>\n    <span class="token keyword">if</span> t <span class="token operator">==</span> s<span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">True</span>\n   \t<span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">False</span>\nnumber <span class="token operator">=</span> <span class="token number">1001</span>\npalim <span class="token operator">=</span> is_palindrom<span class="token punctuation">(</span>number<span class="token punctuation">)</span>\n<span class="token keyword">if</span> palim<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span><span class="token string"> is a palindrom"</span></span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span><span class="token string"> is not a palindrom"</span></span><span class="token punctuation">)</span></code></pre></div>'}}),"\n"),"\n"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,s.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)},l=e(4160),c=e(9680),r=e(2808),i=e(3217),u=e(1086),d=e(2548),k=e(1272);const m=n=>{let{data:a,location:e,children:s}=n;const{mdx:o}=a,{frontmatter:p}=o,{tags:m}=p,g={"@context":"https://schema.org","@type":"BlogPosting",headline:p.title,author:{"@type":"Person",name:"Naveen M K",url:"http://www.naveenmk.me",image:"https://avatars.githubusercontent.com/u/49693820"},name:p.title,abstract:p.description,image:p.image,description:p.description,copyrightYear:(new Date).getFullYear(),copyrightHolder:"Naveen M K"};return t.createElement("div",null,t.createElement(c.Z,{title:p.title,description:p.description,image:p.image,article:!0}),t.createElement(r.h,{data:g}),t.createElement(i.Z),t.createElement("article",{className:"blog-post",itemScope:!0,itemType:"http://schema.org/Article"},p.image?t.createElement(u.Z,{img_loc:p.image}):t.createElement("div"),t.createElement("div",{className:k.FH},t.createElement("div",{className:k.Tx+" blog-post"},t.createElement("header",null,t.createElement("h1",{className:"py-2",itemProp:"headline"},p.title),t.createElement("small",null,"Published on ",p.date,p.updated_date?" · Updated on "+p.updated_date:""),t.createElement("div",{className:k.r_},m.map((n=>t.createElement(l.rU,{to:"/tags/"+n},t.createElement("span",{key:n,className:k._q},n)))))),t.createElement("section",{className:"flex flex-col blog-post-content pt-3 mx-auto justify-center",id:"blog-start",itemProp:"articleBody"},s)))),t.createElement(d.Z))};function g(n){return t.createElement(m,n,t.createElement(p,n))}},2808:function(n,a,e){e.d(a,{h:function(){return t}});var s=e(7294);const t=n=>{let{data:a}=n;return s.createElement("script",{type:"application/ld+json",dangerouslySetInnerHTML:{__html:JSON.stringify(a)}})}},2548:function(n,a,e){e.d(a,{Z:function(){return l}});var s=e(7294),t=e(3935),o=e(8144);const p="undefined"!=typeof window;var l=()=>{const{scrollYProgress:n}=(0,o.vO)();return s.createElement(s.Fragment,null,p&&(0,t.createPortal)(s.createElement(o.q.div,{style:{width:n.to({range:[0,1],output:["0%","100%"]})},className:"scroll-progress-bar-module--scrollProgressBar--fd42b"}),document.body))}},1086:function(n,a,e){e.d(a,{Z:function(){return l}});var s=e(7294),t="bgphoto-module--base_container--3f935",o="bgphoto-module--inner_container--2454f",p="bgphoto-module--top_container--83622";function l(n){let{img_loc:a}=n;var e={backgroundImage:"url("+a+")"};return s.createElement("div",{className:t+" "+p},s.createElement("div",{className:t+" "+o,style:e}))}},1272:function(n,a,e){e.d(a,{FH:function(){return t},Tx:function(){return s},_q:function(){return o},r_:function(){return p}});var s="posts-style-module--core_blog_post--f38d0",t="posts-style-module--outer_class--bc1ef",o="posts-style-module--tag--a6529",p="posts-style-module--tagSection--e4e30"},1151:function(n,a,e){e.d(a,{ah:function(){return o}});var s=e(7294);const t=s.createContext({});function o(n){const a=s.useContext(t);return s.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-src-posts-palindrome-md-ee3de84d76ce85f555cf.js.map